local function stretch_projection(near, far)
    return vmath.matrix4_orthographic(0, render.get_width(), 0, render.get_height(), near, far)
end

function init(self)
    self.tile_pred = render.predicate({"tile"})
    self.gui_pred = render.predicate({"gui"})
    self.text_pred = render.predicate({"text"})
    self.screen_text_pred = render.predicate({"screen_text"})
    self.particle_pred = render.predicate({"particle"})
    self.quad_pred = render.predicate({"quad"})

    self.clear_color = vmath.vector4(0, 0, 0, 0)
    self.clear_color.x = sys.get_config("render.clear_color_red", 0)
    self.clear_color.y = sys.get_config("render.clear_color_green", 0)
    self.clear_color.z = sys.get_config("render.clear_color_blue", 0)
    self.clear_color.w = sys.get_config("render.clear_color_alpha", 0)

    self.view = vmath.matrix4()

    local color_params = { format = render.FORMAT_RGBA, 
        width = render.get_width(), height = render.get_height()}
    local target_params = {[render.BUFFER_COLOR_BIT] = color_params }

    self.target = render.render_target("original", target_params)
    self.screen_text_target = render.render_target("text", target_params)
    self.gui_target = render.render_target("gui", target_params)
end

function update(self)  
    render.set_depth_mask(true)
    render.set_stencil_mask(0xff)
   
    render.set_viewport(0, 0, render.get_width(), render.get_height())
    render.set_view(self.view)

    render.set_depth_mask(false)
    render.disable_state(render.STATE_DEPTH_TEST)
    render.disable_state(render.STATE_STENCIL_TEST)
    render.enable_state(render.STATE_BLEND)
    render.set_blend_func(render.BLEND_SRC_ALPHA, render.BLEND_ONE_MINUS_SRC_ALPHA)
    render.disable_state(render.STATE_CULL_FACE)

    render.set_projection(stretch_projection(-10, 10))

    render.enable_render_target(self.target)
    render.clear({[render.BUFFER_COLOR_BIT] = self.clear_color, [render.BUFFER_DEPTH_BIT] = 1, [render.BUFFER_STENCIL_BIT] = 0})
    render.draw(self.tile_pred)
    render.draw(self.particle_pred)
    --render.draw(self.screen_text_pred)
    render.draw_debug3d()
    render.disable_render_target(self.target)

    render.enable_render_target(self.screen_text_target)
    render.clear({[render.BUFFER_COLOR_BIT] = self.clear_color, [render.BUFFER_DEPTH_BIT] = 1, [render.BUFFER_STENCIL_BIT] = 0})
    render.draw(self.screen_text_pred)

    render.set_view(vmath.matrix4())
    render.set_projection(vmath.matrix4_orthographic(0, render.get_window_width(), 0, render.get_window_height(), -1, 1))
    render.enable_state(render.STATE_STENCIL_TEST)
    render.draw(self.gui_pred)
    render.draw(self.text_pred)
    render.disable_state(render.STATE_STENCIL_TEST)
    render.disable_render_target(self.screen_text_target)
    
    render.clear({[render.BUFFER_COLOR_BIT] = self.clear_color})

    render.set_viewport(0, 0, render.get_window_width(), render.get_window_height())
    render.set_view(vmath.matrix4())
    render.set_projection(vmath.matrix4())

    render.enable_texture(0, self.target, render.BUFFER_COLOR_BIT)
    render.enable_texture(1, self.screen_text_target, render.BUFFER_COLOR_BIT)
    render.draw(self.quad_pred)
    render.disable_texture(0, self.target)
    render.disable_texture(1, self.screen_text_target)
end

function on_message(self, message_id, message)
    if message_id == hash("clear_color") then
        self.clear_color = message.color
    elseif message_id == hash("set_view_projection") then
        self.view = message.view
    end
end